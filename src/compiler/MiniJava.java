package compiler;

/* Generated By:JavaCC: Do not edit this line. MiniJava.java */
import syntax.*;
                import java.util.LinkedList;

        public class MiniJava implements MiniJavaConstants {

        public static void main(String args[]) {
            Compiler.main(args);
        }

  static void error_to(int kind) throws ParseException {
        ParseException e = generateParseException();  // generate the exception object.
        System.err.println(e.toString());  // print the error message
        Token t;
        do {
                t = getNextToken();
        } while (t.kind != kind && t.kind != EOF && t.kind != 0);
        Compiler.errors++;
  }

  static final public Program Goal() throws ParseException {
 MainClass mc; LinkedList<ClassDecl> classes = new LinkedList<>();
    mc = MainClass();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
          ClassDecl cl;
      cl = ClassDeclaration();
                                                classes.add(cl);
    }
    jj_consume_token(0);
         {if (true) return new Program(mc, classes);}
    throw new Error("Missing return statement in function");
  }

  static final public MainClass MainClass() throws ParseException {
 Identifier className; Identifier argsName; Statement s; Token t;
    jj_consume_token(CLASS);
    t = jj_consume_token(ID);
                        className = new Identifier(t.beginLine, t.beginColumn, t.image);
    jj_consume_token(LBRACE);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(LPAREN);
    jj_consume_token(STRING);
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
    t = jj_consume_token(ID);
                                                                             argsName = new Identifier(t.beginLine, t.beginColumn, t.image);
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    s = Statement();
    jj_consume_token(RBRACE);
    jj_consume_token(RBRACE);
             {if (true) return new MainClass(className, argsName, s);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl ClassDeclaration() throws ParseException {
 LinkedList<VarDecl> vars = new LinkedList<VarDecl>(); LinkedList<MethodDecl> methods = new LinkedList<MethodDecl>(); Identifier id; Identifier extend = null; boolean extending = false; Token t;
    try {
      jj_consume_token(CLASS);
      t = jj_consume_token(ID);
                                id = new Identifier(t.beginLine, t.beginColumn, t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        t = jj_consume_token(ID);
                                                                                                               extending = true; extend = new Identifier(t.beginLine, t.beginColumn, t.image);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTARRAY:
        case INT:
        case BOOL:
        case ID:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
                          VarDecl var;
        var = VarDeclaration();
                                                              vars.add(var);
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
                          MethodDecl meth;
        meth = MethodDeclaration();
                                                                      methods.add(meth);
      }
      jj_consume_token(RBRACE);
                    if (extending)
                    {
                        {if (true) return new ExtendingClassDecl(id, extend, vars, methods);}
                    }
                      {if (true) return new SimpleClassDecl(id, vars, methods);}
    } catch (ParseException e) {
                error_to(RBRACE);
                {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public VarDecl VarDeclaration() throws ParseException {
 Identifier id; Type t; Token token;
    try {
      t = Type();
      token = jj_consume_token(ID);
      jj_consume_token(SEMICOLON);
                                         id = new Identifier(token.beginLine, token.beginColumn, token.image);
                 {if (true) return new VarDecl(t, id);}
    } catch (ParseException e) {
                error_to(SEMICOLON);
                {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public MethodDecl MethodDeclaration() throws ParseException {
 Identifier id; Token t; Type type; LinkedList<Formal> formals = new LinkedList<Formal>(); LinkedList<VarDecl> vars = new LinkedList<VarDecl>(); LinkedList<Statement> statements = new LinkedList<Statement>(); Expression ex;
    try {
      jj_consume_token(PUBLIC);
      type = Type();
      t = jj_consume_token(ID);
                                             id = new Identifier(t.beginLine, t.beginColumn, t.image);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTARRAY:
      case INT:
      case BOOL:
      case ID:
                            Type ttype; Token tt;
        ttype = Type();
        tt = jj_consume_token(ID);
                                              formals.add(new Formal(ttype, new Identifier(tt.beginLine, tt.beginColumn, tt.image)));
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_4;
          }
          jj_consume_token(COMMA);
          ttype = Type();
          tt = jj_consume_token(ID);
                                                   formals.add(new Formal(ttype, new Identifier(tt.beginLine, tt.beginColumn, tt.image)));
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      label_5:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_5;
        }
                                       VarDecl var;
        var = VarDeclaration();
                                                                           vars.add(var);
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case PRINTLN:
        case LBRACE:
        case ID:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
                          Statement s;
        s = Statement();
                                                       statements.add(s);
      }
      jj_consume_token(RETURN);
      ex = Expression();
      jj_consume_token(SEMICOLON);
      jj_consume_token(RBRACE);
                 {if (true) return new MethodDecl(type, id, formals, vars, statements, ex);}
    } catch (ParseException e) {
                error_to(SEMICOLON);
                {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
 Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTARRAY:
        jj_consume_token(INTARRAY);
                            {if (true) return Type.THE_INT_ARRAY_TYPE;}
        break;
      case BOOL:
        jj_consume_token(BOOL);
                          {if (true) return Type.THE_BOOLEAN_TYPE;}
        break;
      case INT:
        jj_consume_token(INT);
                         {if (true) return Type.THE_INTEGER_TYPE;}
        break;
      case ID:
        t = jj_consume_token(ID);
                          {if (true) return new IdentifierType(t.beginLine, t.beginColumn, t.image);}
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                error_to(SEMICOLON);
                {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
 Token t; Expression ex; Statement s1; Statement s2; Identifier id; Expression ex1; LinkedList<Statement> states = new LinkedList<Statement>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        jj_consume_token(LBRACE);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case WHILE:
          case PRINTLN:
          case LBRACE:
          case ID:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_7;
          }
          s1 = Statement();
                                     states.add(s1);
        }
        jj_consume_token(RBRACE);
                                                             {if (true) return new Block(states);}
        break;
      case IF:
        t = jj_consume_token(IF);
        jj_consume_token(LPAREN);
        ex = Expression();
        jj_consume_token(RPAREN);
        s1 = Statement();
        jj_consume_token(ELSE);
        s2 = Statement();
                                                                                       {if (true) return new If(ex,s1,s2);}
        break;
      case WHILE:
        t = jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        ex = Expression();
        jj_consume_token(RPAREN);
        s1 = Statement();
                                                                    {if (true) return new While(ex,s1);}
        break;
      case PRINTLN:
        t = jj_consume_token(PRINTLN);
        jj_consume_token(LPAREN);
        ex = Expression();
        jj_consume_token(RPAREN);
        jj_consume_token(SEMICOLON);
                                                           {if (true) return new Print(ex);}
        break;
      case ID:
        t = jj_consume_token(ID);
                          id = new Identifier(t.beginLine, t.beginColumn, t.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          ex = Expression();
          jj_consume_token(SEMICOLON);
                                                                                                                {if (true) return new Assign(id, ex);}
          break;
        case LBRACKET:
          jj_consume_token(LBRACKET);
          ex1 = Expression();
          jj_consume_token(RBRACKET);
          jj_consume_token(ASSIGN);
          ex = Expression();
          jj_consume_token(SEMICOLON);
                                                                         {if (true) return new ArrayAssign(id,ex1,ex);}
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                error_to(SEMICOLON);
                {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression() throws ParseException {
 Token t; Expression ex; Identifier id;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        t = jj_consume_token(NUM);
                          ex = new IntegerLiteral(Integer.parseInt(t.image));
        break;
      case TRUE:
        jj_consume_token(TRUE);
                         ex = new True();
        break;
      case FALSE:
        jj_consume_token(FALSE);
                          ex = new False();
        break;
      case ID:
        t = jj_consume_token(ID);
                         ex = new IdentifierExp(t.beginLine, t.beginColumn, t.image);
        break;
      case THIS:
        jj_consume_token(THIS);
                         ex = new This();
        break;
      case NEW:
        jj_consume_token(NEW);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          jj_consume_token(INT);
          jj_consume_token(LBRACKET);
          ex = Expression();
          jj_consume_token(RBRACKET);
                ex = new NewArray(ex);
          break;
        case ID:
          t = jj_consume_token(ID);
          jj_consume_token(LPAREN);
          jj_consume_token(RPAREN);
            id=new Identifier(t.beginLine, t.beginColumn, t.image); ex = new NewObject(id);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case BANG:
        jj_consume_token(BANG);
        ex = Expression();
                                        ex = new Not(ex);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        ex = Expression();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_8:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_8;
        }
        ex = ExpressionPrime(ex);
      }
                 {if (true) return ex;}
    } catch (ParseException e) {
                error_to(SEMICOLON);
                {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Expression ExpressionPrime(Expression ex) throws ParseException {
 Expression e1; Token t; LinkedList<Expression> args = new LinkedList<Expression>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        e1 = Expression();
                                      {if (true) return new And(ex,e1);}
        break;
      case LT:
        jj_consume_token(LT);
        e1 = Expression();
                                      {if (true) return new LessThan(ex,e1);}
        break;
      case PLUS:
        jj_consume_token(PLUS);
        e1 = Expression();
                                      {if (true) return new Plus(ex,e1);}
        break;
      case MINUS:
        jj_consume_token(MINUS);
        e1 = Expression();
                                      {if (true) return new Minus(ex,e1);}
        break;
      case TIMES:
        jj_consume_token(TIMES);
        e1 = Expression();
                                      {if (true) return new Times(ex,e1);}
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        e1 = Expression();
        jj_consume_token(RBRACKET);
                                           {if (true) return new ArrayLookup(ex,e1);}
        break;
      case 52:
        jj_consume_token(52);
                             {if (true) return new ArrayLength(ex);}
        break;
      case DOT:
                   Expression arg;
        jj_consume_token(DOT);
        t = jj_consume_token(ID);
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case THIS:
        case TRUE:
        case FALSE:
        case LPAREN:
        case BANG:
        case ID:
        case NUM:
          arg = Expression();
                                                                     args.add(arg);
          label_9:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[13] = jj_gen;
              break label_9;
            }
            jj_consume_token(COMMA);
            arg = Expression();
                                                                                                            args.add(arg);
          }
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
                                                                                                                                    {if (true) return new Call(ex, new Identifier(t.beginLine, t.beginColumn, t.image), args);}
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                error_to(SEMICOLON);
                {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(52)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(TIMES)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(INTARRAY)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniJavaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x4000,0x0,0x80,0x10000000,0x0,0x10800a,0x0,0x10800a,0x21000000,0x10800a,0x0,0x431020,0x10000000,0x431020,0x89000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x1e0,0x0,0x0,0x1e0,0x100,0x1e0,0x100,0x0,0x100,0x140,0x301,0x0,0x301,0x10001e,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJava(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJava(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJava(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniJavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJava(MiniJavaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        }
